Action Filters: Are pre-procecessing or post-processing logic in the Asp.net MVC Pipeline

-We can create custom action filters to manage any specific functionality before or after action methods calls, by inheriting from actionfilterattribute class
-



Model Binding : is a mechanism which converts the URL segment into method parameters
-Acts like a bridge between http request and the action method

Model binder uses a default modelbinder for mapping, and it follows below rule for mapping
 1. Request Form []- if request is a post request
 2. RouteData.Values[] - if value is in the route
 3. Request.QuerySyring[] - if the values are concatenated in the url (uname=?&pas=)
 4. Request.Files[] - if a file is being uploaded

In real life scenario, there will be need for custom binding, where the UI controls names and the model properties names do not match

- By implementing IModelBinder, we can do custom binding

title : Mr
fname : ABC
mname : PQR
lname : XYZ


Customer Name :Mr.ABCPQRXYZ

Bundling and minification : bundling of all scripts/styles into a collection, so that we can render all those needed as a single request. This can improve performance

Minification : is a process of removing whitespace,comments or any extra details so that the data is minified and occupies less space.

Asynchronous Controllers:

1. Create a controller that inherits from AsyncController class
2. Change the ActionResult to Task 
3. Mark the Action Method as async
4. Await the task

Authentications:

1. None - Allow Anonymous
2. Windows Authentication : IIS authenticates users in one of the 3 ways(basic, digest,integrated windoes authentication). After authentication, ASP.Net uses this authentication to authorize access to resources to the users
3. Form Authentication : Credential based authentication
4. Passport Authentication : is a centralized authentication service(paid) from microsoft that offers single logon services


Forms Authentication


1. Namespace System.Web,Security to be included
2. In web.config file under System.Web section add authentication as below :
<system.web>
	  <authentication mode="Forms">
		  <forms loginUrl="Accounts/Login"></forms>
	  </authentication>
3. We need to use the FormsAuthentication.SetAuthCookie for the logged in user (basically store the user name temporarily)
4. We need use the FormsAuthentication.Signout() for logout


Rolebased Authentication : Roles help in giving permissions to access a particular resource post authentication

We need to implement the Roleprovider abstract class which is in the System.Web.Security namespace
-While we may implement all the methods of the RoleProvider, there is a need to compulsorily implement the 
'GetRolesforuser(string username)' method that returns an array of roles for a given user
- AFter implemnetation, we need to make an entry in the web.config file under <system.web> section for the roleprovider and rolename as below :

 <roleManager defaultProvider="UsersRoleProvider" enabled="true">
		  <providers>
			  <clear/>
			  <add name="UsersRoleProvider" type="SecurityPrj.Models.UsersRoleProvider"/>
		  </providers>
	  </roleManager>

- We are clearing all roles, and then adding role providers(more than one). We have to ensure that the type attribute is given a fully qualified roleprovider name (i.e namespace/folder/s/class name), while name can be any name. We need to give the name of the default provider by setting the value of the enabled to true.

Now we can specify which resource/actionmethod/page is accessible to which roles



Atrribute Based Routing : More Control over conventional routing (URI patterns)
 - Reduces the chance of errors (any modification to the routing can make the application inaccessible)
 - Decople the controller name and action name from the route
 - Can map 2 routes to a single action method



https://localhost:44310/student/getallstudents
https://localhost:44310/student/getstudentbyid?sid=2
https://localhost:44310/student/getstudentcourse?sid=4

 if we want the URI pattern like this student/1/courses , then it would be very difficult using conventional routing

So we need to route using the routing attribute [Route]. For this we have to enable the MapMVCAttributeRoute() in the routeconfig.cs file