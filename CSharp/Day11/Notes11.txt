Serialization : The process of converting an objects data into a form that can be stored as a physical file, database, memory or over the network.

DeSerialization : It is the reverse process of Serialization, where stream of bytes are converted back to objects

Types of Serialization :
  1. Binary
  2. XML
  3. SOAP
  4. JSON 

XML : eXtensible markup lang

Threads : are defined as the execution path of a program
          they are light weight process
          the thread that executes first is known as the Main thread.
          the other threads are created by the main thread as child threads
          threads are defined the system.threading namespace

Importatnt Properties of Thread class
  - CurrentThread
  - IsAlive
  - Name
  - ThreadState

State of a Thread  :
   - Unstarted
   - Runnable
   - Running
   - Not Runnable
   - Dead

Functionality on a Thread :
  - Sleep
  - Join   - Thread Synchronization
  - Abort
  - Suspend
  - Resume
  - Start

Thread Synchronization : A mechanism to protect overlap of some crucial/critical data using the below functions :
  - Blocking
  - locks
  - Signalling
  - Join

Thread Pool : Is a collection of threads that canbe re-used for some job/activity. 
We can get a thread from pool, using one of the methods of the thread class known as QueueUserWorkItem(). This method tries to give a thread from th epool if available, else will give a callback when available. Till such time the method will be queued. 


Class Library : are a type of project that creates .dll assemblies. They cannot be executed on their own, since they need a host (.exe) application to test and run

Extension Methods :  are additional functions that are provided as a part of the original object. 

Steps for creating extension methods : As per the Demo

1. Create a class Library project (CalculatorProject)
2. Rename the class class1 to CalculatorClass
3. Add functionality (Add2Nos)
4. Build the project
5. Add a new Console Application project to the solution (Dll_Client)
6. Add a reference to the CalculatorPrj in dll_client by right clicking the reference option and selecting the project->ok
7. Use the referred assembly in the dll_client projects any file (.cs), which will use the library
8. Create and and instantiate an object of the dll class(CalculatorClass). (cc)
9. Invoke the Add2Nos() with the created object  (cc.Add2Nos(15,10))


Now we need to add more calculator fumctions to the Calculator class of the CalculatorPrj.
  - In the real life applns. we cannot add it to the class, hence we create extension methods

- Create another Dll project(class librray) called Calculator2
- Rename the class class1 to AddonCalculator
- Add the reference of the 1st Dll( CalculatorPrj) in the second
- Use the namespace of the first dll in the second dll's class file (.cs)
- Make the AddonCalculator class static
- Create the additional function Subtract2Nos by marking it as static
- Pass the object of the first Dll's class as the very first argument of the function with the this keyword as below:
   (this CalculatorClass ccobj, int a, int b) 
-Build the second dll
- Now go to Dll_client, add the reference to the second Dll(Calculator2)
- Use the namespace
- Now with the help of the first object, we will beable to call the method of the second dll class.
- Observe that the new method having an down arrow

Note : Extension methods are always declared as static, but when they are bound with any class or structure, they will convert inti non-static methods
- When an extension method is defined with the same name and signature of the existing method, then the compiler will resolve only the existing method and not the extension method ( hence extension methods do not support overriding
- We can also add extension methods in the selaed class 
- Cannot be applied to properties, events,fields etc.
- The main advantage of extension method is to add new functionalities in the existing class without inheritance





- 

   
          