WYSIWYG : 

OOP : Way of building applications/way of desiging an application

- Encapsulation : Unit of Information (data + methods/behaviours)
- Abstraction : Giving Required data and hiding not required data
- Inheritance : Possiblilities of extension of behaviour
                   single
                   multi level
- Polymorphism : Many Forms 
                  overloading
                  overriding

- all information resides inside a class

Class : is a user defined data type that encompases all the information required.

  Class is internal by default, but all the members of the class are Private by default
  
        
Object : Instance of a class with which we can use the information that is available inside the class

Static members are available as a single copy for the entire class. 
               Can be modified
               Maintained and managed by the CLR

Constructors : Are special functions of a class
               They are meant to allocate memory and initialize the members of the class
               They have the same name as that of the class
               They do not have any return types
               They can be overloaded (parameterized constructors)
               They have to be either public or internal
When a class does not have a constructor defined, then the framework supplies a default constructor

Destructors : is also a special function of the class
              It is meant for deallocation of the memory
              It also has the same name as that of the class prefixed with a '~'
              It cannot be overloaded
              It does not have any return type

Destructors are actually not needed to be specified inside the class, since the CLR manages automatic garbage collection and disposes off any unreferenced memory. 


Enumerations : is a set of named constants
               it is a user defined value type
               the default type of enumeration list elements is int
               the items in the enumeration list are called enumerators
               they can be initialiosed to override the default value

Implicit data types
               var   : is an implicitly typed variable
                       must assign a value at the time of declaration
                       will convert to the data type of the value assigned
                       once assigned cannot change the data type (may be with explicit conversion)
                       compiler based

               dynamic : is an object type
                         the actual type of a dynamic variable is known at the runtime
                         runtime based

Abstraction ----- Encapsulation

Encapsulation : is a process of enclosing one or more items within a physical or logical package.
                In OOP methodology, encapsulation prevents access to implementation details using access specifiers/modifiers

Access Specifier : defines the scope and visibility of a class member.

All classes in C# are internal by default
All class members in C# are private by default (you can change the access to public or internal or protected or protected internal)

                   c# supports 
                   1. private  : Accessible only in the class where it is declared. No access anywhere else
                   2. public   : All classes within the assembly or outside the assembly with or without derivation can access public  				members 
                                We just need an object of the class to access the public members
                            
                   3. protected : Are accessible to the class where it is declared and all its derived classes
                                  The derived classes can be in the same assembly as that of the parent or in other assembly
                   4. internal  :  Acts exactly like public, but allows access to either derived or non derived classes of the same 				  assembly
                   5. internal protected or protected internal : Internal to all the derived and non derived classes of the assembly
                                                                 Protected to all the derived classes of other assembly


ReadOnly and Constant : 

   