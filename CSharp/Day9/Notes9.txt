-Delegates : are like function pointers of C/C++
They are reference type objects that holds the reference to a method. This reference can be changed at Runtime.
They are used extensively in event programming and call backs

1. Declare delegate objects(either within the namespace or within the class)
2. Instantiate the delegate object by passing the reference of the method to the object (only the name of the method)
3. Invoke the delegate object (either using the invoke function or just calling it with '()')
4. If the method expects arguments, pass it thru the delgate
5. For passing the reference of the method to the delegate, both the delegate signature and the function/method signature should match

Multicast Delegates : where a single delegate object can be made to refer to multiple methods of the same signature
                      We can add on the methods using '+' or remove using '-' operator
Note : When we multicast a delegate object to methods that return a value, we should be rest assured that only the last methods return value is available.

Delegate Object/s being passed as an argument to a function/method

- Provides a good way to encapsulate the methods
- They are type safe pointer of any method
- Delegates can be used in anonymous method invocation

Types of Delegates : 

 Function Delegates : Is an in-built delegate type
                      They must return a value
                      They can have 0 to 16 input parameters
                      Does not allow ref and out parameters
                      They can be used with anonymous method or lamba expression

 Action Delegates :   is a delgate type that does not take any input nor return any value 
                      They can be used with anonymous method or lamba expression

 Predicate Delegates : is a delegate type that has to take one input parameter and return a boolean(true or false)
                       They can be used with anonymous method or lamba expression


Events : user -->event--->delegate--->function
------   - Events are declared and raised in a class and are asscociated with event handlers using delegates either within the same class or some other class
  The class containing the event is used to publish the event (publisher class)
  The class that accepst the event is called the subscriber class
        

  An Event can be made to trigger multiple functions using the delegate object that matches the function signature

Using Keyword is used to include namespaces, static classes and as blocks of code that uses various objects
         - using block will call the Dispose() automatically, where as an object will need to invoke the Dispose()

Dispose() - is a method in IDisposable Interface
 When we want to implement the Dispose() method, we need to inherit our class from IDisposable


Co-Variance and Contravariance : Both these concepts help in preserving the compatability of objects, variables, parameter of more derived type to an objects,variables,parameters of a less derived type.

Co-Variance : 

enables to pass a derived type when a base type is expected. It is like variance of same kind 
     The derived types can have extra functionalities than base type 
     Can accept big if small is expected   (refer demo (Day10) passing Employee type (big) when Person (small)is expectedtype )

Contra Variance : Is applied to the parameters. It allows a method with the parameters of a base class to be assigned to a delegate that expects parameters of the derived class
 
(refere day 10 demo - where a delegate is declared to expect a big type(Employee), but we are assigning a function to the delgate which is expecting a small type(Person)