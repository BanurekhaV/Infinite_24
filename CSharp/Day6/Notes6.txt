Polymorphism : 

   Overriding : Function signature should be same 
                It is always seen across base and derived 
                Implements Dynamic polymorphism (using co-variance)
   Overloading : 
       function/method : when we write 1 or more functions with the same name but differ in either the no.of arguments/parameters or the data type of the arguments (function signature should be different)
         Overloading is always seen in the same class 
         implements Static Polymorphism

   Operator Overloading: int a=6, int b=3;  a + b; (9)
              Program p= new program();
               Program p2= new Program();
               p + p2;   throws an error not knowing how to add 2 objects
    
 Runtime Polymorphism/Late Binding/Dynamic Binding : Function calls are resolved at the runtime

 Static Polymorphism/Early Binding/Static Binding : Function calls are resolved at the compilation time

Properties :  they are named members of class, structures, interfaces
	      are extensions of fields
              they are accessed thru accessors(get,set), using which we can read or write the private fields
              they have to be public
              since they are the extensions of fields, their data type should match the field
              We can restrict writing values to the field by not giving the set{} accessor     
              
  
Manual Properties Implementation : Refer eg of Dotnet_Day6.Properties_Eg.cs (Declaring all fields of the class and then writing the properties for the same)         
Automatic Properties Implementation : We only write properties directly without fields.
              The fields would be created automatically underlyingly by the compile/runtime


Indexers : allows an object to be indexed such as an array. When we define indexer for a class, it behaves similar to a virtual array.
         We can access the instance of the class using the array access operator([])
         Indexers are similar to that of the property, except that properties gets or sets a specific data member, whereas the indexer gets or sets a particular value from the object
        Unlike Properties, Indexers do not have any name, instead are used with the 'this' keyword.

Interfaces : are reference types, like classes. They can contain Properties, Methods,Delegates,Events (but only declarations and not implementation)
 -Interface members are public by default
 -The Class that inherits from an Interface will have to provide implementation to all the members. Also if a class implements an interface that has its own parent interface, then the class will alos have to provide definitions to all the interface methods (chain implementation)
 -A class can inherit from multiple interfaces
 -One Interface can inherit from other interface/s
 -Interfaces do not allow explicit modifiers
 -We cannot create an instance of an interface, but a refernce object can be made to point to the implementing class

Advantages of Interface:
  - used to achieve loose coupling
  - used to achieve total abstraction
  - used to achieve component-based programming
  - used to achieve plug and play architecture
 
Explicit Interface Implementation :

  When a class inherits from 2 interfaces, and both the interface have same method/s, then the class can give explicit implementation to both the methods
 When a class explicitly implements interface members, then the member cannot be accessed thru the class object, but only thru interface reference variable(refer to options in the demo)
 Public access modifier is not allowed
 To make one of the method default, then implement that method normally without any interface reference. This can invoked using a class object.

Types of classes: 
   1. static classes: cannot be instantiated and cannot be inherited. All members have to be static only. Can use the static class and all its member with the class name
   2. abstract classes : cannot be instantiated, but can be inherited.
                         is a class that has atleast 1 abstract method
                         can have both abstract as well as non abstract methods, and also virtual methods
                       The derived classes have to implement the abstract method using 'override'
   3. sealed classes : Can be instantiated, but cannot be inherited. It is the final class or concrete class that does not allow extensions and overriding
   4. partial classes : Can be defined in multiples files. Multiple developers can work simultaneously





