use trainingdb

select * from empdummy
select * from empdummy1

select * from tblemployee where deptid not in(1,4,2)

select empname,salary from tblemployee
where not exists(select deptid from tblemployee where deptid=3)

select empno,ename,deptno from emp eouter
where not exists(select 'x' from emp where mgr_id=eouter.empno)

select empno,ename,deptno from emp eouter
where exists(select 'x' from emp where mgr_id=eouter.empno)

--the above with in operator
select empno,ename,deptno from emp 
where empno in(select mgr_id from emp where mgr_id is not null)

--find all departments that do not have any employees

select deptid,deptname from tblDepartment d
where not exists(select 'x' from tblEmployee where DeptId=d.DeptId)

--views
create view vWEmpbyDept
as
select Empname,Salary,Gender,Deptname from
tblEmployee join tblDepartment on
tblEmployee.DeptId=tblDepartment.DeptId

sp_helptext vwempbydept

select * from vWEmpbyDept  -- selection using the virtual table 
drop view vwempbydept

--create a view to find all employee name,salary, gender and deptnames of IT dept.
create view vWITEmp
as select empname,salary,gender,deptname from tblemployee join tblDepartment
on tblEmployee.deptid=tblDepartment.DeptId where tblDepartment.DeptName='IT'

drop view vWITEmp
--let us change the view definition to include the pk of both tables
create view vWITEmp
as select empid,empname,gender,salary,e1.deptid,e1.deptname from tblemployee e join tblDepartment e1
on e.deptid=e1.DeptId where e1.DeptName='IT'

--dml thru views
select * from tblDepartment
select * from tblEmployee

select * from vWITEmp
insert into vWITEmp values(200,'Banurekha','Female',7500,7,'Quality')

delete from vWITEmp where empid=106 -- not successful
update vWITEmp set salary=7000 where empid=106  -- successful

update vWITEmp set deptname='IT' where empid=107 -- unexpected updation

--eg 2 view from a single table
drop view vw1
create view vw1 as select empid,empname,salary,deptid from tblEmployee

select * from vw1

--
insert into vw1 values(200,'Banurekha',7600,1) -- insertion fails since the other columns 
                                    --   of the table are boubd by constraints

delete from vw1 where empid=111  -- succeeds

update vw1 set Salary=7000 where empid=107  -- also succeeds


--indexes
drop table testtable
create table testtable(tid int, tname varchar(20),tcity varchar(20))

insert into testtable values(5,'F','Vizag'),(1,'B','Pune'),(1,'C','Delhi'),
(2,'D','Bangalore'),(3,'E','Hyderabad')

update testtable set tid=6 where tname='E'

select * from testtable

create clustered index idxtid on testtable(tid)
sp_help testtable

--now let us check with unique clustered index on a table without pk
create unique clustered index idxtid on testtable(tid)

insert into testtable values(5,'F','Vizag'),(4,'B','Pune'),(1,'C','Delhi'),
(2,'D','Bangalore'),(3,'E','Hyderabad')

--drop index 
drop index testtable.idxtid

--non clustered

insert into tblemployee values('111','Arjun','Male',6900,1,879878,'Ahmedabad')

select * from tblEmployee

create nonclustered index idxename on tblemployee(empname)
create nonclustered index idxsal on tblemployee(salary)


--filtered index 
drop index tblemployee.idxfil
create index idxfil on tblemployee(city) where city is not null

select * from tblemployee where city is not null and empname like 'A%'

--various datatypes
drop table sample
create table Sample
(sampleid varchar(10),
samplename text,
samplenotes ntext,
sampledoj date,
sampleamount money)

insert sample values('s200','xdfchgvjhbkjiuyuihghhjkjff','76tyguhbcen9njhlkjhjlgkhfk','11/11/2023',55000)

select * from Sample

--computed or calculated columns in a table
--columns that receive value based on other columns 
create table testEmp(eid int, ename varchar(20),salary float, AnnualSalary as (Salary*12))

insert into testEmp values(1,'AA',5000)

select * from testEmp

--startdate , projected end date (90 days from start date), Actual enddate(Projected +7)

select datename(DAYOFYEAR,getdate())
select DATEDIFF(mm,'01/01/2002',getdate())

select dateadd(dd,27,getdate())
select getdate()

select convert(varchar(24),getdate())

select cast(day(getdate()) as varchar(2)) + ' '+ datename(mm,getdate()) + ' '
+ cast(Year(getdate())as varchar(4))as [Date Month Year]



--procedures
--eg 1
create procedure prwish
as
select 'Welcome to SQL procedures'

sp_helptext prwish
--call the above procedure
--can be called simply by their name / with execute procedurename / exec procedurename
prwish
execute prwish
exec prwish

--eg 2
create or alter proc prcsecond
as
begin
select * from tblemployee where salary between 6900 and 7500 and deptid in(1,2,3)
end

prcsecond

--eg 3

--procedure with input
create or alter proc getEmpSalary @empid int
as
begin
select empname,salary from tblEmployee where empid=@empid
end

getEmpSalary 121

--eg 4
--display the given employee data with the given gender
create or alter proc getGendept(@deptno int, @gen varchar(10))
as
begin
select * from tblemployee where DeptId=@deptno and gender=@gen 
end

getgendept 2,'Male'

--procedures with both input and output parameters
--eg 5
--get the salary for a given employee
create or alter proc GetEmpSalary(@ename varchar(25), @sal float output)
as
begin
select @sal=salary from tblEmployee where empname=@ename
end

--to execute the above proc with ouput
--1. 
declare @retsal float
execute GetEmpSalary 'Arjun',@retsal output
print 'The Salary of the given Employee is :' + cast(@retsal as varchar(10))
select @retsal

--2. by changing the order of input output parameters
declare @returnSal float
exec GetEmpSalary @sal=@returnsal output,@ename='Nidhi'
select @returnsal


--multiple output values from procedure
--eg 6
create or alter proc GetEmpSalnDept(@ename varchar(25), @sal float output, @deptid int output)
as
begin
select @sal=salary,@deptid=deptid from tblEmployee where empname=@ename
end


declare @retsal float
declare @edeptid int
execute GetEmpSalnDept 'Arjun',@retsal output, @edeptid output
print 'The Salary and the department of the given Employee is :' + cast(@retsal as varchar(10)) +' '+cast(@edeptid as varchar(2))
select @retsal,@edeptid

--procedure with return parameter
--given a dept id, the proc returns no.of employees in that department

--eg 7
create or alter proc EmpCount @id int
as
begin
return (select count(empid) from tblemployee where deptid=@id)
end

--to execute the above proc
declare @empctr int
exec @empctr=Empcount 5
print 'Number of employees in the dept are :' + ' '+cast(@empctr as varchar(4))

-- procedure to show that it cannot return non integer values
--eg 8 
create or alter proc getname @eid int
as
begin
return select empname from tblemployee where empid=@eid
end

--to execute
declare @empname varchar(25)
execute @empname=getname 103
print @empname

--dml operations with procedures
--eg 9
create or alter procedure EmpIns(@eid int, @ename varchar(25),@ph varchar(10))
as
begin
insert into tblemployee(Empid,Empname,Phone) values(@eid,@ename,@ph)
end

empins 115,'Yashika',667788

select * from tblemployee

--updation
--eg 10
create or alter proc UpdDept
as
begin
update tblemployee set deptid=5 where deptid is null
end

upddept
