use trainingdb


select lower('SQL SERVER')
select len(empname) from tblemployee
select SUBSTRING(empname,1,3)from tblEmployee

--find all employees and their salaries who earn more than any employee of dept 2

select empname,salary from tblemployee 
where salary >any(select salary from tblemployee where deptid=2)

--find all employees and their salaries who earn more than all employees of dept 2
select empname,salary from tblemployee 
where salary >all(select salary from tblemployee where deptid=2)

--find all employees and their salaries who earn equal to that of the employee of dept 2
select empname,salary from tblemployee 
where salary in(select salary from tblemployee where deptid=2)

-- column level constraint
create table EmpDummy
(Empno int primary key,  
EName varchar(30) not null,
EAge int check(EAge between 21 and 58),
ECity varchar(25) default 'Chennai',
EPhone varchar(10) unique,
EDeptid int references tbldepartment(deptid))

--table level constraints
create table EmpDummy1
(EmpNo int,
EName varchar(35)not null,
EAge int,
ECity varchar(25),
Ephone varchar(10),
EDeptid int,
primary key(EmpNo),
check(EAge between 21 and 50),
foreign key(edeptid) references tbldepartment(deptid),
unique(ephone))

--for testing (assignment)
create table DEPT(deptno numeric(2) primary key, dname varchar(15), loc varchar(15))
 
insert into DEPT(deptno, dname, loc) values(10,'ACCOUNTING','NEW YORK'), 
(20,'RESEARCH','DALLAS'),
(30,'SALES','CHICAGO'), 
(40,'OPERATIONS','BOSTON')

create table EMP(empno numeric(4) primary key, ename varchar(20), job varchar(20),mgr_id numeric(4), hiredate date, sal int check(sal>0), comm int, deptno numeric(2) foreign key references dept(deptno))
 
insert into EMP(empno, ename, job, mgr_id, hiredate, sal, comm, deptno) 
values
    (7369, 'SMITH', 'CLERK', 7902, '17-DEC-80', 800, NULL, 20),
    (7499, 'ALLEN', 'SALESMAN', 7698, '20-FEB-81', 1600, 300, 30),
    (7521, 'WARD', 'SALESMAN', 7698, '22-FEB-81', 1250, 500, 30),
    (7566, 'JONES', 'MANAGER', 7839, '02-APR-81', 2975, NULL, 20),
    (7654, 'MARTIN', 'SALESMAN', 7698, '28-SEP-81', 1250, 1400, 30),
    (7698, 'BLAKE', 'MANAGER', 7839, '01-MAY-81', 2850, NULL, 30),
    (7782, 'CLARK', 'MANAGER', 7839, '09-JUN-81', 2450, NULL, 10),
    (7788, 'SCOTT', 'ANALYST', 7566, '19-APR-87', 3000, NULL, 20),
    (7839, 'KING', 'PRESIDENT', NULL, '17-NOV-81', 5000, NULL, 10),
    (7844, 'TURNER', 'SALESMAN', 7698, '08-SEP-81', 1500, 0, 30),
    (7876, 'ADAMS', 'CLERK', 7788, '23-MAY-87', 1100, NULL, 20),
    (7900, 'JAMES', 'CLERK', 7698, '03-DEC-81', 950, NULL, 30),
    (7902, 'FORD', 'ANALYST', 7566, '03-DEC-81', 3000, NULL, 20),
    (7934, 'MILLER', 'CLERK', 7782, '23-JAN-82', 1300, NULL, 10)

	update emp set sal=sal*1.1 where
	deptno=(select deptno from dept where dname like'research')

	--self join
	select * from emp
	--find all Supervisors and their subordinates name
	select e.ename as 'Subordinate Name', m.ename as 'Supervisor Name'
	from emp e join emp m on e.mgr_id=m.empno
	--subqueries
--display the names,job and salary of employees where the job is that of 7900 and salary
--greater than that of empno 7369

select ename,job,sal from emp
where job=(select job from emp where empno=7900) --'Clerk'
and sal>(select sal from emp where empno=7369)   -- 800

--nested subquery
--find all employees who are having the job as that of smith
select ename,job,sal from emp
where job=
         (select job from emp where empno =
		                                (select empno from emp where ename='Smith'))

-- list dept wise min salary which are greater than dept 20
select deptno, min(sal) from emp group by deptno
having min(sal)>(select min(sal) from emp where deptno=20)

--find the list of employees who earn less than any manager, but they should not be a manager

select ename,job,sal from emp
where sal <any(select sal from emp where job like'M%') and job<>'Manager'

sp_help tblemployee

--disable /enable check constraint
alter table tblemployee nocheck constraint chksal  -- disable check constraint

alter table tblemployee check constraint chksal --enable check constraint


insert into tblemployee values(112,'Ramya','Female',6400,4,6765676,'Bangalore')

--bulk insertion
insert into EmpDummy values(2,'XYZ',22,'Delhi','12234567',2),(3,'PQR',24,'Hyderabad',3245,1)

select * from EmpDummy
--bulk insertion
select * from EmpDummy1

insert into EmpDummy1
select * from empdummy where ECity='Delhi'

--corelated subquery
-- to find all employees who earn more than the average salary in thier department

/*to solve the above requirement, outer query has to supply deptid, then the 
inner query will find the avg for that depratment, which is again used by the outer 
query to qualify*/
select * from tblEmployee

select empname,salary,deptid from tblEmployee oq
where salary >(select AVG(salary) from tblEmployee where deptid=oq.DeptId)

--second highest salary

select e.empname,e.salary from tblEmployee e
where 2=(select count(salary) from tblEmployee e1 where e1.salary >=e.Salary)

-- replaced with a simple inner join
--using corelated subquery
select e.empname, e.salary from tblemployee e 
where salary >(select avG(salary) from tblEmployee e1
where e1.DeptId=e.DeptId)

--the same is used with join
select e.empname,e.salary from tblemployee e inner join
(select DEptid,avg(salary) as Department_Average from tblEmployee
group by deptid) as e1 on e.deptid=e1.deptid where e.salary > e1.Department_Average

--to update a table using corelated subquery

--update all employees salary whose salary is the minimum in that department

select deptid,min(salary) from tblEmployee
group by deptid

update tblemployee set salary=salary+200 from tblemployee t1 
where salary<=
              (select min(t2.salary) from tblEmployee t2 where t2.DeptId=t1.DeptId)

Example : corelated sub query

use Northwind

select categoryid,unitprice from products
order by categoryid

--find the products whose unitprice is greater to the average unitprice of the product
--within the same category

select productname,unitprice,categoryid from products p1
where unitprice >(
                 select avg(p2.unitprice) from products p2
				  where p2.CategoryID=p1.CategoryID
				  group by p2.CategoryID)
				  order by CategoryID,ProductName


select categoryid,avg(unitprice) from products 
group by CategoryID



--case
create table casetable(cid int, casename varchar(20))

insert into casetable values(5,'white'),(2,'blue'),(3,'green'),(4,'yellow')

select * from casetable

--simple case without else
select cid,casename,
case casename
   when 'red' then 'danger'
   when 'blue' then 'primary'
   when 'green' then 'success'
end as remarks
   from casetable
   --case with else
   select cid,casename,
case casename
   when 'red' then 'danger'
   when 'blue' then 'primary'
   when 'green' then 'success'
   else 'warning'
end as colorremarks
   from casetable

--searched case
select cid,casename,
case 
   when casename='red' then 'danger'
   when casename='blue' then 'primary'
   when casename='green' then 'success'
   else 'Incorrect color'
end as color_dsesc
   from casetable

--nested cases inside if else statement

declare @salesmade int
set @salesmade=245  -- 1. assigning a value to a variable using set
select @salesmade=400 --2. assigning a value to a variable using select
select @salesmade as 'Total Sales'  -- renaming a variable using select alone

print 'The total sales made is ' + ' ' + cast(@salesmade as varchar(5))
select 'The total sales made is ' + ' ' + cast(@salesmade as varchar(5))
if @salesmade>300
  select 'Bumper Sales'
else
 begin
  select case 
   when @salesmade between 100 and 200 then 'Poor Sales'
   when @salesmade between 201 and 300 then 'Ok sales'
   when @salesmade between 301 and 500 then 'Good Sales'
   else 'No Sales at all'
   end as 'Sale Status'
  end

  --nested case

declare @totsales int
set @totsales=100
select case
 when @totsales >=500 then 'Bumper Sales'
 when @totsales <500 then
   case
     when @totsales between 100 and 200 then 'Poor Sales'
     when @totsales between 201 and 300 then 'Ok sales'
     when @totsales between 301 and 500 then 'Good Sales'
	 else 'No sales'
    end
 end as SaleData

 --conversions/casting
 select 1+'2'
 select 1+2
 select 1+'a'

 --Transact SQL
 --allows us to use programming constructs for decision making

 --eg 1
 begin
 declare @v1 int =50
 declare @v2 int=100
 declare @sum int
 set @sum=@v1+@v2
 print 'The total of 2 nos. is' + ' ' + cast(@sum as varchar(5))
 select @sum

  if(@v1>@v2)
  print 'v1 is greater'
  else
  print 'v2 is greater'
end

 end
--using tsql increase the salary by 200/- for all employess who earn less than empid 109

--increase salary for employee

 begin
  declare @esal float
  declare @ename varchar(30)
  select @ename=empname, @esal=salary from tblEmployee where empid=110
  print 'Name of the Employee : ' +  ' ' + @ename
  print @ename + ' ' +'Current Salary is :' + ' '+cast(@esal as varchar(5))
   if(@esal<=6600)
     begin
       set @esal=@esal+200
	   print 'Employee revised Salary is :'+ '  '+ cast(@esal as varchar(5))
	 end
	 else 
	  begin
	   print 'ok salary'
      end
end



--while, break and continue
declare @ctr int=1
while @ctr<=5
 begin
  print @ctr
  set @ctr=@ctr+1
 end

 -- break and continue
declare @ctr1 int=0
while @ctr1<=5
 begin
   set @ctr1=@ctr1+1
   if @ctr1=4
   --break
   continue
   print @ctr1
 end

 --union and union all
 create table table2(TId int identity, TName varchar(30),
 TGrade char(1),TPercentage int)

 insert into table2 values('Simran','A',85),('Sanjeev','A',80),('SHanthanu','B',65),
 ('Yashika','B',60)

 select * from table1
 select * from table2

 alter table table1 add newcol varchar(5)

 select TGrade,Tpercentage from table1
 union all
 select TGrade,tpercentage from table2

 --intersect
 drop table dummy
 create table dummy2(BonusId int ,ID int,BonusAmt float)

 insert into dummy2 values(200,1,25000),(201,3,20000)

 select * from dummy
 select * from dummy2

 select dummy.Id,dname,dummy2.BonusAmt from dummy left join dummy2 on 
 dummy.id=dummy2.id
 intersect
  select dummy.Id,dname,dummy2.BonusAmt from dummy right join dummy2 on 
 dummy.id=dummy2.id
